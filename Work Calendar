<!doctype html>
<html lang="th">
 <head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Shared Calendar</title>
  <script src="/_sdk/data_sdk.js"></script>
  <script src="/_sdk/element_sdk.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
        body {
            box-sizing: border-box;
            height: 100%;
            margin: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        html {
            height: 100%;
        }
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background-color: #e5e7eb;
        }
        .calendar-day {
            background-color: white;
            min-height: 120px;
            padding: 8px;
            position: relative;
        }
        .calendar-day.other-month {
            background-color: #f9fafb;
            color: #9ca3af;
        }
        .calendar-day.today {
            background-color: #dbeafe;
        }
        .event-item {
            background-color: #3b82f6;
            color: white;
            padding: 2px 6px;
            margin: 2px 0;
            border-radius: 4px;
            font-size: 11px;
            cursor: pointer;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }
        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }
    </style>
  <style>@view-transition { navigation: auto; }</style>
 </head>
 <body class="bg-gray-50">
  <div class="container mx-auto p-6 max-w-6xl"><!-- Header -->
   <div class="bg-white rounded-lg shadow-md p-6 mb-6">
    <h1 id="calendar-title" class="text-3xl font-bold text-gray-800 mb-4">Work Calendar</h1>
    <div class="flex flex-wrap gap-4 items-center"><button id="add-event-btn" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium transition-colors"> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà </button>
     <div class="flex items-center gap-2"><button id="prev-month" class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-2 rounded-lg transition-colors"> ‚Üê ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô </button> <span id="current-month" class="text-xl font-semibold text-gray-700 px-4"></span> <button id="next-month" class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-2 rounded-lg transition-colors"> ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Üí </button>
     </div>
    </div>
    <div class="mt-4 flex flex-wrap gap-4 text-sm">
     <div class="flex items-center gap-2">
      <div class="w-4 h-4 bg-red-100 border border-red-200 rounded"></div><span class="text-gray-600">üèõÔ∏è ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£</span>
     </div>
     <div class="flex items-center gap-2">
      <div class="w-4 h-4 bg-orange-100 border border-orange-200 rounded"></div><span class="text-gray-600">üôè ‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∞</span>
     </div>
     <div class="flex items-center gap-2">
      <div class="w-4 h-4 bg-blue-100 border border-blue-200 rounded"></div><span class="text-gray-600">üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</span>
     </div>
    </div>
   </div><!-- Upcoming Events -->
   <div class="bg-white rounded-lg shadow-md p-6 mb-6">
    <h2 class="text-xl font-bold text-gray-800 mb-4">‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á</h2>
    <div id="upcoming-events" class="space-y-3"><!-- Upcoming events will be populated here -->
    </div>
   </div><!-- Calendar -->
   <div class="bg-white rounded-lg shadow-md overflow-hidden"><!-- Days of week header -->
    <div class="calendar-grid bg-gray-100 text-center font-semibold text-gray-700">
     <div class="p-4">
      ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
     </div>
     <div class="p-4">
      ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå
     </div>
     <div class="p-4">
      ‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£
     </div>
     <div class="p-4">
      ‡∏û‡∏∏‡∏ò
     </div>
     <div class="p-4">
      ‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ
     </div>
     <div class="p-4">
      ‡∏®‡∏∏‡∏Å‡∏£‡πå
     </div>
     <div class="p-4">
      ‡πÄ‡∏™‡∏≤‡∏£‡πå
     </div>
    </div><!-- Calendar days -->
    <div id="calendar-days" class="calendar-grid"><!-- Days will be generated by JavaScript -->
    </div>
   </div>
  </div><!-- Add Event Modal -->
  <div id="add-event-modal" class="modal">
   <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
    <h2 class="text-xl font-bold text-gray-800 mb-4">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà</h2>
    <form id="add-event-form">
     <div class="mb-4"><label for="event-title" class="block text-sm font-medium text-gray-700 mb-2">‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</label> <input type="text" id="event-title" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
     </div>
     <div class="mb-4"><label for="event-date" class="block text-sm font-medium text-gray-700 mb-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</label> <input type="date" id="event-date" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
     </div>
     <div class="mb-4"><label for="event-time" class="block text-sm font-medium text-gray-700 mb-2">‡πÄ‡∏ß‡∏•‡∏≤</label> <input type="time" id="event-time" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
     </div>
     <div class="mb-4"><label for="event-description" class="block text-sm font-medium text-gray-700 mb-2">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</label> <textarea id="event-description" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
     </div>
     <div class="mb-6"><label for="event-author" class="block text-sm font-medium text-gray-700 mb-2">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°</label> <input type="text" id="event-author" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
     </div>
     <div class="flex gap-3"><button type="submit" id="save-event-btn" class="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg font-medium transition-colors"> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å </button> <button type="button" id="cancel-event-btn" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 py-2 px-4 rounded-lg font-medium transition-colors"> ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å </button>
     </div>
    </form>
   </div>
  </div><!-- Event Details Modal -->
  <div id="event-details-modal" class="modal">
   <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
    <h2 class="text-xl font-bold text-gray-800 mb-4">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h2>
    <div id="event-details-content"><!-- Event details will be populated here -->
    </div>
    <div class="flex gap-3 mt-6"><button id="delete-event-btn" class="flex-1 bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg font-medium transition-colors"> ‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° </button> <button id="close-details-btn" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 py-2 px-4 rounded-lg font-medium transition-colors"> ‡∏õ‡∏¥‡∏î </button>
    </div>
   </div>
  </div>
  <script>
        let currentDate = new Date();
        let events = [];
        let selectedEvent = null;
        let recordCount = 0;

        const defaultConfig = {
            calendar_title: "‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
            add_event_label: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà",
            background_color: "#f9fafb",
            surface_color: "#ffffff",
            text_color: "#374151",
            primary_action_color: "#3b82f6",
            secondary_action_color: "#6b7280",
            font_family: "Segoe UI",
            font_size: 16
        };

        // Data SDK Handler
        const dataHandler = {
            onDataChanged(data) {
                events = data || [];
                recordCount = events.length;
                renderCalendar();
            }
        };

        // Element SDK Configuration
        async function onConfigChange(config) {
            const calendarTitle = document.getElementById('calendar-title');
            const addEventBtn = document.getElementById('add-event-btn');
            const body = document.body;

            // Apply text content
            if (calendarTitle) {
                calendarTitle.textContent = config.calendar_title || defaultConfig.calendar_title;
            }
            if (addEventBtn) {
                addEventBtn.textContent = config.add_event_label || defaultConfig.add_event_label;
            }

            // Apply colors
            const backgroundColor = config.background_color || defaultConfig.background_color;
            const surfaceColor = config.surface_color || defaultConfig.surface_color;
            const textColor = config.text_color || defaultConfig.text_color;
            const primaryColor = config.primary_action_color || defaultConfig.primary_action_color;
            const secondaryColor = config.secondary_action_color || defaultConfig.secondary_action_color;

            body.style.backgroundColor = backgroundColor;
            
            // Apply colors to various elements
            const whiteElements = document.querySelectorAll('.bg-white');
            whiteElements.forEach(el => el.style.backgroundColor = surfaceColor);

            const textElements = document.querySelectorAll('.text-gray-800, .text-gray-700');
            textElements.forEach(el => el.style.color = textColor);

            const primaryButtons = document.querySelectorAll('.bg-blue-600');
            primaryButtons.forEach(el => {
                el.style.backgroundColor = primaryColor;
                el.addEventListener('mouseenter', () => el.style.backgroundColor = adjustColor(primaryColor, -20));
                el.addEventListener('mouseleave', () => el.style.backgroundColor = primaryColor);
            });

            const secondaryButtons = document.querySelectorAll('.bg-gray-200, .bg-gray-300');
            secondaryButtons.forEach(el => {
                el.style.backgroundColor = secondaryColor;
                el.addEventListener('mouseenter', () => el.style.backgroundColor = adjustColor(secondaryColor, -20));
                el.addEventListener('mouseleave', () => el.style.backgroundColor = secondaryColor);
            });

            // Apply font
            const customFont = config.font_family || defaultConfig.font_family;
            const baseSize = config.font_size || defaultConfig.font_size;
            
            body.style.fontFamily = `${customFont}, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif`;
            
            // Scale fonts proportionally
            if (calendarTitle) calendarTitle.style.fontSize = `${baseSize * 1.875}px`;
            document.querySelectorAll('.text-xl').forEach(el => el.style.fontSize = `${baseSize * 1.25}px`);
            document.querySelectorAll('.text-lg').forEach(el => el.style.fontSize = `${baseSize * 1.125}px`);
            document.querySelectorAll('.text-sm').forEach(el => el.style.fontSize = `${baseSize * 0.875}px`);
        }

        function adjustColor(hex, percent) {
            const num = parseInt(hex.replace("#", ""), 16);
            const amt = Math.round(2.55 * percent);
            const R = (num >> 16) + amt;
            const G = (num >> 8 & 0x00FF) + amt;
            const B = (num & 0x0000FF) + amt;
            return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
                (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
                (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
        }

        function mapToCapabilities(config) {
            return {
                recolorables: [
                    {
                        get: () => config.background_color || defaultConfig.background_color,
                        set: (value) => {
                            if (window.elementSdk) {
                                window.elementSdk.setConfig({ background_color: value });
                            }
                        }
                    },
                    {
                        get: () => config.surface_color || defaultConfig.surface_color,
                        set: (value) => {
                            if (window.elementSdk) {
                                window.elementSdk.setConfig({ surface_color: value });
                            }
                        }
                    },
                    {
                        get: () => config.text_color || defaultConfig.text_color,
                        set: (value) => {
                            if (window.elementSdk) {
                                window.elementSdk.setConfig({ text_color: value });
                            }
                        }
                    },
                    {
                        get: () => config.primary_action_color || defaultConfig.primary_action_color,
                        set: (value) => {
                            if (window.elementSdk) {
                                window.elementSdk.setConfig({ primary_action_color: value });
                            }
                        }
                    },
                    {
                        get: () => config.secondary_action_color || defaultConfig.secondary_action_color,
                        set: (value) => {
                            if (window.elementSdk) {
                                window.elementSdk.setConfig({ secondary_action_color: value });
                            }
                        }
                    }
                ],
                borderables: [],
                fontEditable: {
                    get: () => config.font_family || defaultConfig.font_family,
                    set: (value) => {
                        if (window.elementSdk) {
                            window.elementSdk.setConfig({ font_family: value });
                        }
                    }
                },
                fontSizeable: {
                    get: () => config.font_size || defaultConfig.font_size,
                    set: (value) => {
                        if (window.elementSdk) {
                            window.elementSdk.setConfig({ font_size: value });
                        }
                    }
                }
            };
        }

        function mapToEditPanelValues(config) {
            return new Map([
                ["calendar_title", config.calendar_title || defaultConfig.calendar_title],
                ["add_event_label", config.add_event_label || defaultConfig.add_event_label]
            ]);
        }

        // Thai month names
        const thaiMonths = [
            '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
            '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
        ];

        // Thai holidays 2025-2026
        const thaiHolidays = {
            '2025-01-01': '‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà',
            '2025-02-12': '‡∏ß‡∏±‡∏ô‡∏°‡∏≤‡∏Ü‡∏ö‡∏π‡∏ä‡∏≤',
            '2025-04-06': '‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏µ',
            '2025-04-13': '‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå',
            '2025-04-14': '‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå',
            '2025-04-15': '‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå',
            '2025-05-01': '‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥',
            '2025-05-04': '‡∏ß‡∏±‡∏ô‡∏â‡∏±‡∏ï‡∏£‡∏°‡∏á‡∏Ñ‡∏•',
            '2025-05-10': '‡∏ß‡∏±‡∏ô‡∏ß‡∏¥‡∏™‡∏≤‡∏Ç‡∏ö‡∏π‡∏ä‡∏≤',
            '2025-06-03': '‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏£‡∏∞‡∏ä‡∏ô‡∏°‡∏û‡∏£‡∏£‡∏©‡∏≤‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏™‡∏∏‡∏ó‡∏¥‡∏î‡∏≤',
            '2025-07-28': '‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏£‡∏∞‡∏ä‡∏ô‡∏°‡∏û‡∏£‡∏£‡∏©‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏≤‡∏ó‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏±‡∏ß',
            '2025-08-08': '‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏™‡∏≤‡∏¨‡∏´‡∏ö‡∏π‡∏ä‡∏≤',
            '2025-08-09': '‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏£‡∏£‡∏©‡∏≤',
            '2025-08-12': '‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏£‡∏∞‡∏ä‡∏ô‡∏°‡∏û‡∏£‡∏£‡∏©‡∏≤‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏™‡∏¥‡∏£‡∏¥‡∏Å‡∏¥‡∏ï‡∏¥‡πå',
            '2025-10-13': '‡∏ß‡∏±‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡∏ï‡∏û‡∏£‡∏∞‡∏ö‡∏≤‡∏ó‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏ä‡∏ô‡∏Å‡∏≤‡∏ò‡∏¥‡πÄ‡∏ö‡∏®‡∏£',
            '2025-10-23': '‡∏ß‡∏±‡∏ô‡∏õ‡∏¥‡∏¢‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä',
            '2025-12-05': '‡∏ß‡∏±‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏™‡∏°‡∏†‡∏û‡∏û‡∏£‡∏∞‡∏ö‡∏≤‡∏ó‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏ä‡∏ô‡∏Å‡∏≤‡∏ò‡∏¥‡πÄ‡∏ö‡∏®‡∏£',
            '2025-12-10': '‡∏ß‡∏±‡∏ô‡∏£‡∏±‡∏ê‡∏ò‡∏£‡∏£‡∏°‡∏ô‡∏π‡∏ç',
            '2025-12-31': '‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏õ‡∏µ',
            '2026-01-01': '‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà',
            '2026-03-04': '‡∏ß‡∏±‡∏ô‡∏°‡∏≤‡∏Ü‡∏ö‡∏π‡∏ä‡∏≤',
            '2026-04-06': '‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏µ',
            '2026-04-13': '‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå',
            '2026-04-14': '‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå',
            '2026-04-15': '‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå',
            '2026-05-01': '‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥',
            '2026-05-04': '‡∏ß‡∏±‡∏ô‡∏â‡∏±‡∏ï‡∏£‡∏°‡∏á‡∏Ñ‡∏•',
            '2026-05-30': '‡∏ß‡∏±‡∏ô‡∏ß‡∏¥‡∏™‡∏≤‡∏Ç‡∏ö‡∏π‡∏ä‡∏≤',
            '2026-06-03': '‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏£‡∏∞‡∏ä‡∏ô‡∏°‡∏û‡∏£‡∏£‡∏©‡∏≤‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏™‡∏∏‡∏ó‡∏¥‡∏î‡∏≤',
            '2026-07-27': '‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏™‡∏≤‡∏¨‡∏´‡∏ö‡∏π‡∏ä‡∏≤',
            '2026-07-28': '‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏£‡∏∞‡∏ä‡∏ô‡∏°‡∏û‡∏£‡∏£‡∏©‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏≤‡∏ó‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏±‡∏ß',
            '2026-07-29': '‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏£‡∏£‡∏©‡∏≤',
            '2026-08-12': '‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏£‡∏∞‡∏ä‡∏ô‡∏°‡∏û‡∏£‡∏£‡∏©‡∏≤‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏™‡∏¥‡∏£‡∏¥‡∏Å‡∏¥‡∏ï‡∏¥‡πå',
            '2026-10-13': '‡∏ß‡∏±‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡∏ï‡∏û‡∏£‡∏∞‡∏ö‡∏≤‡∏ó‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏ä‡∏ô‡∏Å‡∏≤‡∏ò‡∏¥‡πÄ‡∏ö‡∏®‡∏£',
            '2026-10-23': '‡∏ß‡∏±‡∏ô‡∏õ‡∏¥‡∏¢‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä',
            '2026-12-05': '‡∏ß‡∏±‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏™‡∏°‡∏†‡∏û‡∏û‡∏£‡∏∞‡∏ö‡∏≤‡∏ó‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏ä‡∏ô‡∏Å‡∏≤‡∏ò‡∏¥‡πÄ‡∏ö‡∏®‡∏£',
            '2026-12-10': '‡∏ß‡∏±‡∏ô‡∏£‡∏±‡∏ê‡∏ò‡∏£‡∏£‡∏°‡∏ô‡∏π‡∏ç',
            '2026-12-31': '‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏õ‡∏µ'
        };

        // Buddhist holy days (Wan Phra) - approximate dates for 2025-2026
        const buddhistHolyDays = [
            '2025-01-06', '2025-01-13', '2025-01-21', '2025-01-29',
            '2025-02-05', '2025-02-12', '2025-02-20', '2025-02-28',
            '2025-03-07', '2025-03-14', '2025-03-22', '2025-03-30',
            '2025-04-06', '2025-04-13', '2025-04-21', '2025-04-29',
            '2025-05-06', '2025-05-13', '2025-05-21', '2025-05-28',
            '2025-06-05', '2025-06-12', '2025-06-20', '2025-06-27',
            '2025-07-05', '2025-07-12', '2025-07-19', '2025-07-27',
            '2025-08-03', '2025-08-10', '2025-08-18', '2025-08-25',
            '2025-09-02', '2025-09-09', '2025-09-16', '2025-09-23',
            '2025-10-01', '2025-10-08', '2025-10-15', '2025-10-23',
            '2025-10-30', '2025-11-06', '2025-11-13', '2025-11-21',
            '2025-11-28', '2025-12-06', '2025-12-13', '2025-12-21',
            '2025-12-28', '2026-01-04', '2026-01-12', '2026-01-19',
            '2026-01-27', '2026-02-03', '2026-02-11', '2026-02-18',
            '2026-02-26', '2026-03-06', '2026-03-13', '2026-03-21',
            '2026-03-28', '2026-04-05', '2026-04-12', '2026-04-20',
            '2026-04-27', '2026-05-05', '2026-05-12', '2026-05-20',
            '2026-05-27', '2026-06-04', '2026-06-11', '2026-06-19',
            '2026-06-26', '2026-07-04', '2026-07-11', '2026-07-18',
            '2026-07-26', '2026-08-02', '2026-08-09', '2026-08-17',
            '2026-08-24', '2026-08-31', '2026-09-08', '2026-09-15',
            '2026-09-22', '2026-09-30', '2026-10-07', '2026-10-14',
            '2026-10-22', '2026-10-29', '2026-11-05', '2026-11-12',
            '2026-11-20', '2026-11-27', '2026-12-05', '2026-12-12',
            '2026-12-20', '2026-12-27'
        ];

        function renderCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            
            // Update month display
            document.getElementById('current-month').textContent = `${thaiMonths[month]} ${year + 543}`;
            
            // Get first day of month and number of days
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const daysInMonth = lastDay.getDate();
            const startingDayOfWeek = firstDay.getDay();
            
            // Get previous month days
            const prevMonth = new Date(year, month - 1, 0);
            const daysInPrevMonth = prevMonth.getDate();
            
            const calendarDays = document.getElementById('calendar-days');
            calendarDays.innerHTML = '';
            
            // Add previous month days
            for (let i = startingDayOfWeek - 1; i >= 0; i--) {
                const dayDiv = createDayElement(daysInPrevMonth - i, true);
                calendarDays.appendChild(dayDiv);
            }
            
            // Add current month days
            for (let day = 1; day <= daysInMonth; day++) {
                const dayDiv = createDayElement(day, false);
                calendarDays.appendChild(dayDiv);
            }
            
            // Add next month days to fill the grid
            const totalCells = calendarDays.children.length;
            const remainingCells = 42 - totalCells; // 6 rows √ó 7 days
            for (let day = 1; day <= remainingCells; day++) {
                const dayDiv = createDayElement(day, true);
                calendarDays.appendChild(dayDiv);
            }

            // Update upcoming events
            renderUpcomingEvents();
        }

        function renderUpcomingEvents() {
            const upcomingContainer = document.getElementById('upcoming-events');
            const today = new Date();
            const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);
            
            // Get upcoming events (next 7 days)
            const upcomingEvents = events.filter(event => {
                const eventDate = new Date(event.date);
                return eventDate >= today && eventDate <= nextWeek;
            }).sort((a, b) => new Date(a.date) - new Date(b.date));

            if (upcomingEvents.length === 0) {
                upcomingContainer.innerHTML = '<p class="text-gray-500 text-center py-4">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ</p>';
                return;
            }

            upcomingContainer.innerHTML = upcomingEvents.map(event => {
                const eventDate = new Date(event.date);
                const formattedDate = `${eventDate.getDate()} ${thaiMonths[eventDate.getMonth()]}`;
                const isToday = eventDate.toDateString() === today.toDateString();
                const isTomorrow = eventDate.toDateString() === new Date(today.getTime() + 24 * 60 * 60 * 1000).toDateString();
                
                let dateLabel = formattedDate;
                if (isToday) dateLabel = '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ';
                else if (isTomorrow) dateLabel = '‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ';

                return `
                    <div class="flex items-center justify-between p-3 bg-blue-50 rounded-lg border-l-4 border-blue-500">
                        <div class="flex-1">
                            <div class="font-semibold text-gray-800">${event.title}</div>
                            <div class="text-sm text-gray-600">
                                ${dateLabel}${event.time ? ` ‡πÄ‡∏ß‡∏•‡∏≤ ${event.time}` : ''}
                            </div>
                            ${event.description ? `<div class="text-sm text-gray-500 mt-1">${event.description}</div>` : ''}
                        </div>
                        <div class="text-xs text-gray-500">‡πÇ‡∏î‡∏¢ ${event.author}</div>
                    </div>
                `;
            }).join('');
        }

        function createDayElement(day, isOtherMonth) {
            const dayDiv = document.createElement('div');
            dayDiv.className = `calendar-day ${isOtherMonth ? 'other-month' : ''}`;
            
            // Check if it's today
            const today = new Date();
            const currentYear = currentDate.getFullYear();
            const currentMonth = currentDate.getMonth();
            
            if (!isOtherMonth && 
                day === today.getDate() && 
                currentMonth === today.getMonth() && 
                currentYear === today.getFullYear()) {
                dayDiv.classList.add('today');
            }
            
            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
            
            // Check for holidays and Buddhist holy days
            let dayLabel = `<div class="font-semibold text-sm mb-1">${day}</div>`;
            
            if (!isOtherMonth) {
                // Check for Thai holidays
                if (thaiHolidays[dateStr]) {
                    dayLabel += `<div class="text-xs text-red-600 font-medium mb-1">üèõÔ∏è ${thaiHolidays[dateStr]}</div>`;
                    dayDiv.style.backgroundColor = '#fef2f2';
                }
                
                // Check for Buddhist holy days
                if (buddhistHolyDays.includes(dateStr)) {
                    dayLabel += `<div class="text-xs text-orange-600 font-medium mb-1">üôè ‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∞</div>`;
                    if (!thaiHolidays[dateStr]) {
                        dayDiv.style.backgroundColor = '#fff7ed';
                    }
                }
            }
            
            dayDiv.innerHTML = dayLabel;
            
            // Add events for this day
            if (!isOtherMonth) {
                const dayEvents = getEventsForDay(currentYear, currentMonth, day);
                dayEvents.forEach(event => {
                    const eventDiv = document.createElement('div');
                    eventDiv.className = 'event-item';
                    eventDiv.textContent = event.time ? `${event.time} ${event.title}` : event.title;
                    eventDiv.onclick = () => showEventDetails(event);
                    dayDiv.appendChild(eventDiv);
                });
                
                // Add click handler to add event for this day
                dayDiv.onclick = (e) => {
                    if (e.target === dayDiv || e.target.classList.contains('font-semibold')) {
                        document.getElementById('event-date').value = dateStr;
                        showAddEventModal();
                    }
                };
            }
            
            return dayDiv;
        }

        function getEventsForDay(year, month, day) {
            const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
            return events.filter(event => event.date === dateStr);
        }

        function showAddEventModal() {
            document.getElementById('add-event-modal').classList.add('show');
            document.getElementById('event-title').focus();
        }

        function hideAddEventModal() {
            document.getElementById('add-event-modal').classList.remove('show');
            document.getElementById('add-event-form').reset();
        }

        function showEventDetails(event) {
            selectedEvent = event;
            const content = document.getElementById('event-details-content');
            const eventDate = new Date(event.date);
            const formattedDate = `${eventDate.getDate()} ${thaiMonths[eventDate.getMonth()]} ${eventDate.getFullYear() + 543}`;
            
            content.innerHTML = `
                <div class="space-y-3">
                    <div>
                        <span class="font-semibold text-gray-700">‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</span>
                        <p class="text-gray-800">${event.title}</p>
                    </div>
                    <div>
                        <span class="font-semibold text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</span>
                        <p class="text-gray-800">${formattedDate}</p>
                    </div>
                    ${event.time ? `
                    <div>
                        <span class="font-semibold text-gray-700">‡πÄ‡∏ß‡∏•‡∏≤:</span>
                        <p class="text-gray-800">${event.time}</p>
                    </div>
                    ` : ''}
                    ${event.description ? `
                    <div>
                        <span class="font-semibold text-gray-700">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</span>
                        <p class="text-gray-800">${event.description}</p>
                    </div>
                    ` : ''}
                    <div>
                        <span class="font-semibold text-gray-700">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏î‡∏¢:</span>
                        <p class="text-gray-800">${event.author}</p>
                    </div>
                </div>
            `;
            document.getElementById('event-details-modal').classList.add('show');
        }

        function hideEventDetails() {
            document.getElementById('event-details-modal').classList.remove('show');
            selectedEvent = null;
        }

        async function addEvent(eventData) {
            if (recordCount >= 999) {
                showMessage('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î 999 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô', 'error');
                return;
            }

            const saveBtn = document.getElementById('save-event-btn');
            const originalText = saveBtn.textContent;
            saveBtn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...';
            saveBtn.disabled = true;

            const result = await window.dataSdk.create({
                id: Date.now().toString(),
                title: eventData.title,
                date: eventData.date,
                time: eventData.time,
                description: eventData.description,
                author: eventData.author,
                created_at: new Date().toISOString()
            });

            saveBtn.textContent = originalText;
            saveBtn.disabled = false;

            if (result.isOk) {
                hideAddEventModal();
                showMessage('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
            } else {
                showMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error');
            }
        }

        async function deleteEvent() {
            if (!selectedEvent) return;

            const deleteBtn = document.getElementById('delete-event-btn');
            const originalText = deleteBtn.textContent;
            deleteBtn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö...';
            deleteBtn.disabled = true;

            const result = await window.dataSdk.delete(selectedEvent);

            deleteBtn.textContent = originalText;
            deleteBtn.disabled = false;

            if (result.isOk) {
                hideEventDetails();
                showMessage('‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
            } else {
                showMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error');
            }
        }

        function showMessage(message, type) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white z-50 ${
                type === 'success' ? 'bg-green-600' : 'bg-red-600'
            }`;
            messageDiv.textContent = message;
            document.body.appendChild(messageDiv);

            setTimeout(() => {
                messageDiv.remove();
            }, 3000);
        }

        // Event Listeners
        document.getElementById('add-event-btn').onclick = showAddEventModal;
        document.getElementById('cancel-event-btn').onclick = hideAddEventModal;
        document.getElementById('close-details-btn').onclick = hideEventDetails;
        document.getElementById('delete-event-btn').onclick = deleteEvent;

        document.getElementById('prev-month').onclick = () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            renderCalendar();
        };

        document.getElementById('next-month').onclick = () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            renderCalendar();
        };

        document.getElementById('add-event-form').onsubmit = (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            addEvent({
                title: document.getElementById('event-title').value,
                date: document.getElementById('event-date').value,
                time: document.getElementById('event-time').value,
                description: document.getElementById('event-description').value,
                author: document.getElementById('event-author').value
            });
        };

        // Close modals when clicking outside
        document.getElementById('add-event-modal').onclick = (e) => {
            if (e.target.id === 'add-event-modal') hideAddEventModal();
        };

        document.getElementById('event-details-modal').onclick = (e) => {
            if (e.target.id === 'event-details-modal') hideEventDetails();
        };

        // Initialize
        async function init() {
            try {
                // Initialize Element SDK
                if (window.elementSdk) {
                    await window.elementSdk.init({
                        defaultConfig,
                        onConfigChange,
                        mapToCapabilities,
                        mapToEditPanelValues
                    });
                }

                // Initialize Data SDK
                if (window.dataSdk) {
                    const result = await window.dataSdk.init(dataHandler);
                    if (!result.isOk) {
                        console.error('Failed to initialize data SDK');
                    }
                }

                // Initial render
                renderCalendar();
                await onConfigChange(defaultConfig);
            } catch (error) {
                console.error('Initialization error:', error);
                renderCalendar();
            }
        }

        init();
    </script>
 <script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9964382cc0a51d2f',t:'MTc2MTc1NzEyNC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
